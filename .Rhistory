geom_smooth(method = "lm",
formula = y ~ x,
data = wood) +
labs(x = "hardwood concentration", y = "tensile strength")
library(tidyverse)
path <- "/Users/marcelbraasch/Documents/Informatik/Master/TUM/1. Semester/AR/Exercise data-20201109/woodstrength.csv"
wood <- read_csv(path)
ggplot(wood, aes(x = Conc, y = Strength)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x, data = wood) +
geom_smooth(method = "lm", formula = y ~ Poly(x, 2) , data = wood) +
labs(x = "hardwood concentration", y = "tensile strength")
library(tidyverse)
path <- "/Users/marcelbraasch/Documents/Informatik/Master/TUM/1. Semester/AR/Exercise data-20201109/woodstrength.csv"
wood <- read_csv(path)
ggplot(wood, aes(x = Conc, y = Strength)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x, data = wood) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2) , data = wood) +
labs(x = "hardwood concentration", y = "tensile strength")
library(tidyverse)
path <- "/Users/marcelbraasch/Documents/Informatik/Master/TUM/1. Semester/AR/Exercise data-20201109/woodstrength.csv"
wood <- read_csv(path)
ggplot(wood, aes(x = Conc, y = Strength)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x, data = wood) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), raw=TRUE) +
labs(x = "hardwood concentration", y = "tensile strength")
ggplot(wood, aes(x = Conc, y = Strength)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x, data = wood) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), raw=TRUE, aes(color="2")) +
labs(x = "hardwood concentration", y = "tensile strength")
ggplot(wood, aes(x = Conc, y = Strength)) +
geom_smooth(method = "lm") +
geom_smooth(method = "lm", formula = y ~ poly(x, 2, raw = TRUE), color = "red") + geom_smooth(method = "lm", formula = y ~ poly(x, 3, raw = TRUE), color = "green") + geom_smooth(method = "lm", formula = y ~ poly(x, 4, raw = TRUE), color = "magenta") + geom_smooth(method = "lm", formula = y ~ poly(x, 5, raw = TRUE), color = "yellow") + geom_point() +
labs(x = "hardwood concentration", y = "tensile strength")
ggplot(wood, aes(x = Conc, y = Strength)) +
geom_smooth(method = "lm", aes(color = "1")) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2, raw = TRUE), aes(color = "2")) + geom_smooth(method = "lm", formula = y ~ poly(x, 3, raw = TRUE), aes(color = "3")) + geom_smooth(method = "lm", formula = y ~ poly(x, 4, raw = TRUE), aes(color = "4")) + geom_smooth(method = "lm", formula = y ~ poly(x, 5, raw = TRUE), aes(color = "5")) + geom_point() +
scale_color_manual(name = "polynomial degreee",
values = c("blue", "red", "green", "magenta", "yellow")) + labs(x = "hardwood concentration", y = "tensile strength")
path <- "/Users/marcelbraasch/Documents/Informatik/Master/TUM/1. Semester/AR/Exercise data-20201109/bodyfat.csv"
df <- read_csv(path)
df
m <- lm(Fat ~ Age + Gend, data=df)
m
summary(m)
m <- lm(Fat ~ Age + Gend + I(Age*Gend), data=df)
m <- lm(Fat ~ Age + Gend + Age*Gend, data=df)
summary(m)
summary(lm(Fat ~ Age, data=df))
summary(lm(Fat ~ Gend, data=df))
summary(lm(Fat ~ Age*Gend, data=df))
summary(lm(Fat ~ Age + Gend, data=df))
summary(lm(Fat ~ Age * Gend, data=df))
summary(lm(Fat ~ Age+Gend+ Age * Gend, data=df))
summary(lm(Fat ~ Age * Gend, data=df))
qf
qf(1-0.05,4,17)
path <- "/Users/marcelbraasch/Documents/Informatik/Master/TUM/1. Semester/AR/Exercise data-20201109/crime.csv"
df <- read.csv(path)
df
m <- lm(formula=crime~.-state)
m <- lm(formula=crime~.-state,data=df)
ggfortify::autoplot(m)
library(ggfortify)
ggfortify::autoplot(m)
ggfortify::autoplot(m)
help(filter)
library(dplyr)
help(filter)
df <- read.csv(path) %>% filter(state!="dc")
df
m <- lm(formula=crime~.-state,data=df)
ggfortify::autoplot(m)
autoplot(m)
library(car)
car::powerTransform(df)
help(powerTransform)
help(car::powerTransform)
help(car::powerTransform())
car::powerTransform(,)
car::powerTransform(m)
help(car::powerTransform)
library(car)
install.packages(car)
help(car)
install.package("car")
installed.packages()
help(car::powerTransform)
car::powerTransform(m)
path <- "/Users/marcelbraasch/Documents/Informatik/Master/TUM/1. Semester/AR/Exercise data-20201109/nitrate.csv"
df <- read.csv(path)
df
ggplot(nitrate, aes(x = Light, y = Nitrate, color = Day)) + geom_point() +
labs(x = "Light intensity", "Nitrate utilization")
library(ggplot)
library(tidyverse)
ggplot(nitrate, aes(x = Light, y = Nitrate, color = Day)) + geom_point() +
labs(x = "Light intensity", "Nitrate utilization")
ggplot(nitrate, aes(x = Light, y = Nitrate, color = Day)) + geom_point() +
labs(x = "Light intensity", "Nitrate utilization")
path <- "/Users/marcelbraasch/Documents/Informatik/Master/TUM/1. Semester/AR/Exercise data-20201109/nitrate.csv"
df <- read.csv(path)
library(tidyverse)
ggplot(nitrate, aes(x = Light, y = Nitrate, color = Day)) + geom_point() +
labs(x = "Light intensity", "Nitrate utilization")
help(nls)
m <- nls(data=df,
formula=nitrate~(beta1*Light)/(beta1+Light)
)
m <- nls(data=df,
formula=nitrate~(21000*Light)/(40+Light)
)
m <- nls(data=df,
formula=Nitrate~(21000*Light)/(40+Light)
)
m <- nls(
formula=Nitrate~(21000*Light)/(40+Light),
data=df
)
m <- nls(
formula=Nitrate~(beta1*Light)/(beta2+Light),
start = list(beta1=21000, beta2=40),
data=df
)
m
summary(m)
m <- lm(Nitrate~Light, data=df)
m
summary(m)
m
anova(m)
SS_restrict_resid <- 642007279
SS_full_resid <- 96536196
n <- 48
k <- 1
Fstat <-
((SS_restrict_resid-SS_full_resid)/(1))/
(SS_full_resid/(n-k))
Fstat
Fstat <-
((SS_restrict_resid-SS_full_resid)/(2))/
(SS_full_resid/(n-k))
Fstat
m <- lm(Nitrate~Light, data=df)
m
m <- lm(Nitrate~factor(Light), data=df)
m
summary(m)
help("arima")
path <- "/Users/marcelbraasch/Downloads/QualidadeARO3.xlsx"
df <- read_xlsx(path)
df <- cbind(Time = rownames(df), df)
rownames(df) <- 1:nrow(df)
df
df
path <- "/Users/marcelbraasch/Downloads/QualidadeARO3.xlsx"
df <- read_xlsx(path)
library(tidyverse)
library(readxl)
library(here)
library(readxl)
library(here)
path <- "/Users/marcelbraasch/Downloads/QualidadeARO3.xlsx"
df <- read_xlsx(path)
df <- cbind(Time = rownames(df), df)
rownames(df) <- 1:nrow(df)
gg_base <- ggplot(data = df, aes(x = year, y = visitors))
df
gg_base
gg_base <- ggplot(data = df, aes(x = "Time", y = "Antas-Espinho"))
gg_base
gg_base <- ggplot(data = df, aes(x = "Time", y = "Antas-Espinho") + geom_line()
gg_base
ggplot(data = df, aes(x = "Time", y = "Antas-Espinho") + geom_line()
ggplot(data = df, aes(x = "Time", y = "Antas-Espinho")) + geom_line()
gg_base <- ggplot(data = df, aes(x = Time, y = Antas-Espinho)) + geom_line()
gg_base
gg_base <- ggplot(data = df, aes(x = Time, y = Entrecampos)) + geom_line()
gg_base
n
no
-
str(df)
ggplot(data = df, aes(x = df$Time, y = df$Entrecampos)) + geom_line()
df$Time <- as.numeric(as.character(df$Time))
df$Entrecampos <- as.numeric(as.character(df$Entrecampos))
gg_base <- ggplot(data = df, aes(x = Time, y = Entrecampos)) + geom_line()
gg_base
head(df,1)
head(df,0)
list(head(df,0))
c(head(df,0))
names(df)
c(names(df))
for (name in c(names(df))) {
print(i)
}
for (name in names(df)) {
print(i)
}
dataList <- list("Hello", c("USA", "Red", "100"), c("India", "Blue", "76"))
for(i in dataList)
{print(i)}
rownames(df)
columnnames(df)
names(df)
colnames(df)
for (i in colnames(df)) {print(i)}
for (name in colnames(df))
{
print(name)
}
for (name in colnames(df))
{
df$name <- as.numeric(as.character(df$name))
}
for (name in colnames(df))
{
print(as.character(name))
}
for (name in colnames(df))
{
df$as.character(name) <- as.numeric(as.character(df$name))
}
df <- read_xlsx(path)
df <- cbind(Time = rownames(df), df)
df[] <- lapply(df, as.numeric)
df
gg_base <- ggplot(data = df, aes(x = Time, y = Entrecampos)) + geom_line()
gg_base
df <- read_xlsx(path)
df <- cbind(Time = rownames(df), df)
ggplot(data = df, aes(x = Time, y = Entrecamposm, group = 1)) + geom_line()
ggplot(data = df, aes(x = Time, y = Entrecampos, group = 1)) + geom_line()
ggplot(data = df, aes(x = Time, y = Entrecampos)) + geom_line()
ggplot(data = df, aes(x = Time, y = Entrecampos), group = 1)) + geom_line()
ggplot(data = df, aes(x = Time, y = Entrecampos), group = 1) + geom_line()
ggplot(data = df, aes(x = Time, y = Entrecampos, group = 1)) + geom_line()
g = ggplot(data = df, aes(x = Time, y = Entrecampos, group = 1)) + geom_line()
# Load data
path <- "/Users/marcelbraasch/Downloads/QualidadeARO3.xlsx"
df <- read_xlsx(path)
df <- cbind(Time = rownames(df), df)
rownames(df) <- 1:nrow(df)
df[] <- lapply(df, as.character)
df[] <- lapply(df, as.numeric)
gg_base <- ggplot(data = df, aes(x = Time, y = Entrecampos)) + geom_line()
as.character
df
gg_base <- ggplot(data = df, aes(x = Time, y = Estarreja)) + geom_line()
gg_base
df[] <- lapply(df, as.character)
df[] <- lapply(df, as.numeric)
gg_base <- ggplot(data = df, aes(x = Time, y = Estarreja)) + geom_line()
gg_base
gg_base <- ggplot(data = df, aes(x = Time, y = Estarreja)) + geom_line(size=1)
gg_base
gg_base <- ggplot(data = df, aes(x = Time, y = Estarreja)) + geom_line(size=0.1)
gg_base
library(forecast)
install.packages(forecast)
install.packages("forecast")
# Load data
path <- "/Users/marcelbraasch/Downloads/QualidadeARO3.xlsx"
df <- read_xlsx(path)
y <- ts(df$`Antas-Espinho`, start=2010, frequency = 365)
y
ggtsdisplay(y)
y <- ts(df$`Antas-Espinho`, start=2010, frequency = 365)
ggtsdisplay
library(forecast)
ggtsdisplay(y)
forecast
help(forecast)
lsf.str("package:forecast")
help(package = forecast)
ggtsdisplay
library(forecast)
library(tseries)
install.packages("tseries")
library(forecast)
install.packages("forecast", dependencies=TRUE)
library(forecast)
library(tseries)
install.packages("tseries", dependencies=TRUE)
sessionInfo()
library(tidyverse)
library(readxl)
#library(here)
library(tseries)
install.packages(itsmr)
a = 1
a
install.packages(itsmr)
install.packages("itsmr"")
install.packages("itsmr")
install.packages("itsmr")
library("itsmr")
# Load data
path <- "/Users/marcelbraasch/Downloads/QualidadeARO3.xlsx"
df <- read_xlsx(path)
library(tidyverse)
library(readxl)
#library(here)
library(tseries)
library(forecast)
# Load data
path <- "/Users/marcelbraasch/Downloads/QualidadeARO3.xlsx"
df <- read_xlsx(path)
# Load data
path <- "/Users/marcelbraasch/Desktop/TimeSeriesProject/QualidadeARO3.xlsx"
df <- read_xlsx(path)
y <- ts(df$`Antas-Espinho`, start=2000, frequency = 24)
y
plotc(y)
M = c("log","season", 24, "trend", 0)
e = Resid(y, M)
test(e)
e
M = c("log","season", 24, "trend", 1)
e = Resid(y, M)
e
e = Resid(y)
e
test(e)
Resid(y, c("log"))
tests(Resid(y, c("log")))
test(Resid(y, c("log")))
test(Resid(y, c("log", "seasonal", 24)))
test(Resid(y, c("log", "season", 24)))
test(Resid(y, c("diff",1))
)
plot(Resid(y, c("diff",1))
)
plot(Resid(y, c("diff",1,"diff",1))
)
plot(Resid(y, c("diff",1,"diff",1,"diff",1)))
plot(Resid(y, c("diff",1,"diff",1)))
plot(Resid(y, c("diff",1)))
test(y)
e = Resid(y, c("diff",1))
test(e)
e = Resid(y, c("diff",1,"diff",1))
test(e)
M = c("log", "season")
y
M = c("season", "trend")
e = Resid(y, M)
e = Resid(y, c("season"))
e
e = Resid(y, c("season", "difference", 1))
e = Resid(y, c("season",12,"trend",1))
e
plot(e)
test(e)
e = Resid(y, c("season",12,"trend",1, "difference", 1))
e = Resid(y, c("season",12,"trend",1, "diff", 1))
e
test(e)
e = Resid(y, c("season",24,"trend",1, "diff", 1))
test(Resid(y, c("season",24,"trend",1, "diff", 1)))
test(Resid(y, c("season",24,"trend",1, "diff", 2)))
test(Resid(y, c("season",24,"trend",1, "diff", 2)))
test(Resid(y, c("season",24,"trend",1, "diff", 3)))
test(Resid(y, c("season",24,"trend",1, "diff", 4)))
test(Resid(y, c("season",24, "diff", 4)))
plott(Resid(y, c("season",24, "diff", 4)))
plot(Resid(y, c("season",24, "diff", 4)))
M = c("log","season",12,"trend",1)
log(0)
for (i in seq(1, length(y))) {
if (y[i]==0) { y[i] <- 1e-5 }
}
y
e = Resid(y, M)
test(e)
e = Resid(y, c("season", 24))
e
test(Resid(y, c("season", 24)))
test(Resid(y, c("season", 24, "diff", 1)))
test(Resid(y, c("season", 24, "diff", 2)))
a = arma(e,1,0)
season(y,24)
plotc(y, season(y,24))
y = smooth.fft(y,0.035)
# Load data
path <- "/Users/marcelbraasch/Desktop/TimeSeriesProject/QualidadeARO3.xlsx"
df <- read_xlsx(path)
y <- ts(df$`Antas-Espinho`, start=2000, frequency = 24)
y = smooth.fft(y,0.035)
y <- ts(df$`Antas-Espinho`, start=2000, frequency = 24)
s = smooth.fft(y,0.035)
plotc(y, s)
s
plot(s)
t = trend(y,1)
y
plot(y)
t = trend(y,2)
plot(y)
length(y)
M = c("season", 24, "diff", 1)
Resid(y,M=M)
e = Resid(y,M=M)
test(e)
test(Resid(y,M=c("season", 24, "diff", 1, "diff", 1)))
test(Resid(y,M=c("season", 12, "diff", 1, "diff", 1)))
test(Resid(y,M=c("season", 12, "diff", 2)))
test(Resid(y,M=c("season", 12, "diff", 3)))
test(Resid(y,M=c("season", 12, "diff", 2)))
test(Resid(y,M=c("season", 24, "diff", 2)))
install.packages("R2jags")
install.packages("R2jags",dependencies=TRUE,repos="http://cran.us.r-project.org")
ependencies=TRUE,repos="http://cran.us.r-project.org")
install.packages("MCMCpack",dependencies=TRUE,repos="http://cran.us.r-project.org")
install.packages("runjags",dependencies=TRUE,repos="http://cran.us.r-project.org")
# An example model file is given in:
model.file <- system.file(package="R2jags","model","schools.txt")
# data
J <- 8.0
y <- c(28.4,7.9,-2.8,6.8,-0.6,0.6,18.0,12.2)
sd <- c(14.9,10.2,16.3,11.0,9.4,11.4,10.4,17.6)
jags.data <- list("y","sd","J")
jags.params <- c("mu","sigma","theta")
jags.inits <- function() { list("mu"=rnorm(1),"sigma"=runif(1),"theta"=rnorm(J)) }
# Fit the model
jagsfit <- jags(data=list("y","sd","J"), inits=jags.inits,jags.params,n.iter=10,model.file= model.file)
library(R2jags)
# Fit the model
jagsfit <- jags(data=list("y","sd","J"), inits=jags.inits,jags.params,n.iter=10,model.file= model.file)
library("readxl")
# Fit the data to a gamma distribution
data <- read_excel("data.xls")
# Fit the data to a gamma distribution
data <- read_excel("data.xlsx")
# Fit the data to a gamma distribution
data <- read_excel("data.xlsx")
getwd()
# Fit the data to a gamma distribution
setwd(dirname(parent.frame(2)$ofile))
dirname(sys.frame(1)$ofile)
file.choose()
getSrcDirectory()[1]
getSrcDirectory()
dirname(rstudioapi::getActiveDocumentContext()$path)
dirname(rstudioapi::getActiveDocumentContext())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd("/Users/marcelbraasch/RProjects/stochastic_processes/")
data <- read_excel("data.xlsx")
data
data.1 <- data$`1 mês`
data.1
library(fitdistrplus)
library(R2jags)
library(R2jags)
# Mac users: Install the GNU Fortran (gfortran-4.2.3.dmg) library from the CRAN toolsdirectory:http://cran.r-project.org/bin/macosx/tools.3.
# Install JAGS version 3.4.0 from Martyn Plummer’s repository:http://cran.r-project.org/bin/macosx/tools
# Install JAGS version 3.4.0 from Martyn Plummer’s repository:http://sourceforge.net/projects/mcmc-jags/files/JAGS/3.x/
# install.packages("R2jags",dependencies=TRUE,repos="http://cran.us.r-project.org")
# install.packages("runjags",dependencies=TRUE,repos="http://cran.us.r-project.org")
# install.packages("MCMCpack",dependencies=TRUE,repos="http://cran.us.r-project.org")
install,packages("fitdistrplus", dependencies=TRUE,repos="http://cran.us.r-project.org")
# Mac users: Install the GNU Fortran (gfortran-4.2.3.dmg) library from the CRAN toolsdirectory:http://cran.r-project.org/bin/macosx/tools.3.
# Install JAGS version 3.4.0 from Martyn Plummer’s repository:http://cran.r-project.org/bin/macosx/tools
# Install JAGS version 3.4.0 from Martyn Plummer’s repository:http://sourceforge.net/projects/mcmc-jags/files/JAGS/3.x/
# install.packages("R2jags",dependencies=TRUE,repos="http://cran.us.r-project.org")
# install.packages("runjags",dependencies=TRUE,repos="http://cran.us.r-project.org")
# install.packages("MCMCpack",dependencies=TRUE,repos="http://cran.us.r-project.org")
install.packages("fitdistrplus", dependencies=TRUE,repos="http://cran.us.r-project.org")
library("fitdistrplus")
#x <- rgamma(100,2,11) + rnorm(100,0,.01)
fit.gamma <- fitdist(data.1, distr = "gamma", method = "mle")
data.1
length(data.1)
for (i in data.1) {print(i)}
type(data.1)
typeof(data.1)
typeof(data)
r <- 0
for (i in 1:length(data.1)) {
if (data[i] <= -1) { counter <- counter + 1}
data.1.cum[i] <- counter
}
counter <- 0
for (i in 1:length(data.1)) {
print(i)
#if (data[i] <= -1) { counter <- counter + 1}
#data.1.cum[i] <- counter
}
unter <- 0
for (i in 1:length(data.1)) {
if (data.1[i] <= -1) { counter <- counter + 1}
data.1.cum[i] <- counter
}
cumulative <- c()
cumulative
cumulative <- apped(1)
cumulative <- append(1)
cumulative <- c(cumulative, 1)
cumulative
counter <- 0
cumulative <- c()
for (i in 1:length(data.1)) {
if (data.1[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
cumulative
data.1.cum <- cumulative
data.1.cum
