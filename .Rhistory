}
SPI_counted
SPI_counted %>% add_column(b = cumulative)
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[[j]]
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted %>% add_column(b = cumulative)
}
SPI_counted
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[[j]]
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted %>% mutate(b = cumulative)
}
SPI_counted
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[[j]]
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
print(cumulative)
#SPI_counted %>% mutate(b = cumulative)
}
SPI_counted$test <- cumulative
SPI_counted
# Create the cumulative data for all five series
N <- nrow(data)
M <- ncol(data)
names <- colnames(data)
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[[j]]
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$k <- cumulative
}
SPI_counted
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[[j]]
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$name <- cumulative
}
SPI_counted
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[[j]]
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$name <- cumulative
print(name)
}
SPI_counted
View(SPI_counted)
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[[j]]
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted %>% mutate(!!name := cumulative)
}
SPI_counted
M <- ncol(data)
names <- colnames(data)
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[[j]]
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$x <- cumulative
SPI_counted %>% mutate(!!x := "cumulative")
}
SPI_counted
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[[j]]
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$x <- cumulative
SPI_counted %>% rename(!!x := "cumulative")
}
SPI_counted
M <- ncol(data)
names <- colnames(data)
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[[j]]
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$x <- cumulative
SPI_counted %>% rename(!!name := x)
}
SPI_counted
!!name[[1]]
sym("test")
sym(name[[1]])
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[[j]]
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$sym(name) <- cumulative
#SPI_counted %>% rename(!!name := x)
}
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[[j]]
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$(sym(name)) <- cumulative
#SPI_counted %>% rename(!!name := x)
}
names <- colnames(data)
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[[j]]
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$x <- cumulative
colnames(data)[ncol(data)] <- name
#SPI_counted %>% rename(!!name := x)
}
SPI_counted
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[[j]]
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$x <- cumulative
#colnames(data)[ncol(data)] <- name
#SPI_counted %>% rename(!!name := x)
}
SPI_counted
names <- colnames(data)
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[[j]]
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$x <- cumulative
names(SPI_counted)[-1] <- name
#colnames(data)[ncol(data)] <- name
#SPI_counted %>% rename(!!name := x)
}
SPI_counted
names <- colnames(data)
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[[j]]
print(names)
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$x <- cumulative
names(SPI_counted)[-1] <- name
}
names[1]
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[j]
print(names)
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$x <- cumulative
names(SPI_counted)[-1] <- name
}
SPI_counted
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[j]
print(name)
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$x <- cumulative
names(SPI_counted)[-1] <- name
}
names <- colnames(data)
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[j]
print(name)
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$x <- cumulative
names(SPI_counted)[-1] <- names[j]
}
SPI_counted
names(SPI_counted)[-1]
names(SPI_counted)[[-1]]
names(SPI_counted)[-16
names(SPI_counted)[-1]
names(SPI_counted)[1]
names(SPI_counted)[2]
nrows(SPI_counted)
nrow(SPI_counted)
ncol(SPI_counted)
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[j]
print(name)
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$x <- cumulative
names(SPI_counted)[ncol(SPI_counted)] <- names[j]
}
SPI_counted
2**3
exp(2)
T
T <- N
t
T <- nrow(data)
T
# Define model
t <- SPI_counted$`1 mês`
t
t[1]
t[2]
t[200]
# Provide the data (for `1 mês` series)
t <- SPI_counted$`1 mês`
plp.mod.data <- list("t")
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
runif(100)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1, min=0, max=100)
# Provide the data (for `1 mês` series)
t <- SPI_counted$`1 mês`
plp.mod.data <- list("t")
plp.mod.inits <- function(){
list("alpha1" = runif(1, min=0, max=100), "sigma1" = runif(1, min=0, max=100))
}
set.seed(42)
setwd("/Users/marcelbraasch/RProjects/stochastic_processes/")
data <- read_excel("data.xlsx")
data <- select(data, -1)  # Drop first
# Create the cumulative data for all five series
N <- nrow(data)
M <- ncol(data)
names <- colnames(data)
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[j]
print(name)
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$x <- cumulative
names(SPI_counted)[ncol(SPI_counted)] <- names[j]  # Rename
}
counter <- 0
# Create the cumulative data for all five series
N <- nrow(data)
M <- ncol(data)
names <- colnames(data)
SPI_counted <- tibble(a = 1:N)
for (j in 1:M) {
d <- data[[j]]
name <- names[j]
counter <- 0
cumulative <- c()
for (i in 1:N) {
if (d[i] <= -1) { counter <- counter + 1}
cumulative <- c(cumulative, counter)
}
SPI_counted$x <- cumulative
names(SPI_counted)[ncol(SPI_counted)] <- names[j]  # Rename
}
# Define model
plp.mod <- function() {
# Likelihood
for (i in 1:N) {
y[i] <- lambda[t[i]] * exp(mean1)
lambda[i] <- (alpha1/sigma1) * ((t[i]/sigma1)**(alpha1-1))
}
# Mean until the point T
mean1 <- (T/sigma1)**alpha1
# Prior
alpha1 ~ dunif(0, 100)
sigma1 ~ dpois(0, 100)
}
# Provide the data (for `1 mês` series)
t <- SPI_counted$`1 mês`
plp.mod.data <- list("t")
plp.mod.params <- c("alpha1", "sigma1")
plp.mod.inits <- function(){
list("alpha1" = runif(1, min=0, max=100), "sigma1" = runif(1, min=0, max=100))
}
plp.mod.fit <- jags(data = plp.mod.data,
inits = plp.mod.inits,
parameters.to.save = plp.mod.params,
n.chains = 3, n.iter = 9000,
n.burnin = 1000, model.file = plp.mod)
N
# Define model
plp.mod <- function() {
# Likelihood
for (i in 1:770) {
y[i] <- lambda[t[i]] * exp(mean1)
lambda[i] <- (alpha1/sigma1) * ((t[i]/sigma1)**(alpha1-1))
}
# Mean until the point T
mean1 <- (T/sigma1)**alpha1
# Prior
alpha1 ~ dunif(0, 100)
sigma1 ~ dpois(0, 100)
}
# Provide the data (for `1 mês` series)
t <- SPI_counted$`1 mês`
plp.mod.data <- list("t")
plp.mod.params <- c("alpha1", "sigma1")
plp.mod.inits <- function(){
list("alpha1" = runif(1, min=0, max=100), "sigma1" = runif(1, min=0, max=100))
}
plp.mod.fit <- jags(data = plp.mod.data,
inits = plp.mod.inits,
parameters.to.save = plp.mod.params,
n.chains = 3, n.iter = 9000,
n.burnin = 1000, model.file = plp.mod)
# Define model
plp.mod <- function() {
# Likelihood
for (i in 1:770) {
y[i] <- lambda[t[i]] * exp(mean1)
lambda[i] <- (alpha1/sigma1) * ((t[i]/sigma1)**(alpha1-1))
}
# Mean until the point T
mean1 <- (T/sigma1)**alpha1
# Prior
alpha1 ~ dunif(0, 100)
sigma1 ~ dunif(0, 100)
}
# Provide the data (for `1 mês` series)
t <- SPI_counted$`1 mês`
plp.mod.data <- list("t")
plp.mod.params <- c("alpha1", "sigma1")
plp.mod.inits <- function(){
list("alpha1" = runif(1, min=0, max=100), "sigma1" = runif(1, min=0, max=100))
}
plp.mod.fit <- jags(data = plp.mod.data,
inits = plp.mod.inits,
parameters.to.save = plp.mod.params,
n.chains = 3, n.iter = 9000,
n.burnin = 1000, model.file = plp.mod)
# Define model
plp.mod <- function() {
# Likelihood
for (i in 1:N) {
y[i] <- lambda[t[i]] * exp(mean1)
lambda[i] <- (alpha1/sigma1) * ((t[i]/sigma1)**(alpha1-1))
}
# Mean until the point T
mean1 <- (t[N]/sigma1)**alpha1
# Prior
alpha1 ~ dunif(0, 100)
sigma1 ~ dunif(0, 100)
N <- 770
}
# Provide the data (for `1 mês` series)
t <- SPI_counted$`1 mês`
plp.mod.data <- list("t")
plp.mod.params <- c("alpha1", "sigma1")
plp.mod.inits <- function(){
list("alpha1" = runif(1, min=0, max=100), "sigma1" = runif(1, min=0, max=100))
}
plp.mod.fit <- jags(data = plp.mod.data,
inits = plp.mod.inits,
parameters.to.save = plp.mod.params,
n.chains = 3, n.iter = 9000,
n.burnin = 1000, model.file = plp.mod)
# Define model
plp.mod <- function() {
# Likelihood
for (i in 1:770) {
y[i] <- lambda[t[i]] * exp(mean1)
lambda[i] <- (alpha1/sigma1) * ((t[i]/sigma1)**(alpha1-1))
}
# Mean until the point T
mean1 <- (t[770]/sigma1)**alpha1
# Prior
alpha1 ~ dunif(0, 100)
sigma1 ~ dunif(0, 100)
}
# Provide the data (for `1 mês` series)
t <- SPI_counted$`1 mês`
plp.mod.data <- list("t")
plp.mod.params <- c("alpha1", "sigma1")
plp.mod.inits <- function(){
list("alpha1" = runif(1, min=0, max=100), "sigma1" = runif(1, min=0, max=100))
}
plp.mod.fit <- jags(data = plp.mod.data,
inits = plp.mod.inits,
parameters.to.save = plp.mod.params,
n.chains = 3, n.iter = 9000,
n.burnin = 1000, model.file = plp.mod)
t[770]
t[771]
